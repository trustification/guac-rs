fragment allPackageTree on Package {
    id
    type
    namespaces {
        id
        namespace
        names {
            id
            name
            versions {
                id
                version
                qualifiers {
                    key
                    value
                }
                subpath
            }
        }
    }
}

fragment allIsDependencyTree on IsDependency {
    id
    package {
        ... allPackageTree
    }
    dependencyPackage {
        ... allPackageTree
    }
    dependencyType
    versionRange
    justification
    origin
    collector
}

fragment allCertifyVulnTree on CertifyVuln {
    id
    package {
        ... allPackageTree
    }
    vulnerability {
        id
        type
        vulnerabilityIDs {
            id
            vulnerabilityID
        }
    }
    metadata {
        dbUri
        dbVersion
        scannerUri
        scannerVersion
        timeScanned
        origin
        collector
        documentRef
    }
}

fragment allVulnerabilityTree on Vulnerability {
    id,
    type,
    vulnerabilityIDs {
        id,
        vulnerabilityID
    }
}


fragment allNodeTree on Node {
    __typename
    ... on Package {
        ... allPackageTree
    }
    ... on IsDependency {
        ... allIsDependencyTree
    }
    ... on CertifyVuln {
        ... allCertifyVulnTree
    }
    ... on Vulnerability {
        ... allVulnerabilityTree
    }
}

query Neighbors( $node: ID!, $usingOnly: [Edge!]!) {
    neighbors(node: $node, usingOnly: $usingOnly) {
        ...allNodeTree
    }
}
