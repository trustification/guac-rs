fragment allPackageTree on Package {
    id
    type
    namespaces {
        id
        namespace
        names {
            id
            name
            versions {
                id
                version
                qualifiers {
                    key
                    value
                }
                subpath
            }
        }
    }
}

fragment allIsDependencyTree on IsDependency {
    id
    package {
        ... allPackageTree
    }
    dependencyPackage {
        ... allPackageTree
    }
    dependencyType
    versionRange
    justification
    origin
    collector
}

#query QueryDependencies($package: PkgSpec) {
#IsDependency(isDependencySpec: {package: $package}) {
#...allIsDependencyTree
#}
#}
#
#query QueryDependents($package: PkgSpec, $version: String) {
#IsDependency(isDependencySpec: {dependentPackage: $package, versionRange: $version}) {
#...allIsDependencyTree
#}
#}

query QueryIsDependency($isDependencySpec: IsDependencySpec!) {
    IsDependency( isDependencySpec: $isDependencySpec) {
        ...allIsDependencyTree
    }
}

mutation IngestDependency(
    $pkg: IDorPkgInput!,
    $depPkg: IDorPkgInput!,
    $depPkgMatchType: MatchFlags!,
    $dependency: IsDependencyInputSpec!
) {
    ingestDependency(
        pkg: $pkg,
        depPkg: $depPkg,
        depPkgMatchType: $depPkgMatchType,
        dependency: $dependency)
}
